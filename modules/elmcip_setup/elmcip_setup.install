<?php
/**
 * @file
 * Install and uninstall code.
 */

/**
 * Enable new feature modles, elmcip_content_types, elmcip_field_instances and elmcip_permissions.
 */
function elmcip_setup_update_7002() {
  module_enable(array('elmcip_content_types', 'elmcip_field_instances', 'elmcip_permissions'));
}

/**
 * Remove settings and blocks blonging to wabi, pixture_reloaded, elmcip_bartik and adaptivetheme_admin.
 */
function elmcip_setup_update_7003() {
  $depricated_themes = array(
    'wabi',
    'pixture_reloaded',
    'elmcip_bartik',
    'adaptivetheme_admin',
  );

  // Delete settings from the $variables table.
  print "Removing theme settings from variables table\n";
  variable_del('color_pixture_reloaded_files');
  variable_del('color_pixture_reloaded_logo');
  variable_del('color_pixture_reloaded_palette');
  variable_del('color_pixture_reloaded_screenshot');
  variable_del('color_pixture_reloaded_stylesheets');
  variable_del('theme_pixture_reloaded_settings');
  variable_del('color_wabi_files');
  variable_del('color_wabi_logo');
  variable_del('color_wabi_palette');
  variable_del('color_wabi_screenshot');
  variable_del('color_wabi_stylesheets');
  variable_del('theme_wabi_settings');
  variable_del('color_elmcip_bartik_files');
  variable_del('color_elmcip_bartik_logo');
  variable_del('color_elmcip_bartik_palette');
  variable_del('color_elmcip_bartik_stylesheets');
  variable_del('theme_elmcip_bartik_settings');
  variable_del('theme_adaptivetheme_admin_settings');
  cache_clear_all('variables', 'cache_bootstrap');

  // Remove blocks registered to removed themes.
  foreach ($depricated_themes as $key => $theme) {
    $removed = db_delete('block')
      ->condition('theme', $theme)
      ->execute();
    print "Removed $removed depricated blocks from theme $theme\n";
  }
}

/**
 * Move system user-menu block from header to region-top.
 */
function elmcip_setup_update_7004() {
  $num_updated = db_update('block')
    ->fields(array(
      'region' => 'header_top',
      'status' => 1,
      'weight' => 1,
    ))
    ->condition('delta', 'user-menu')
    ->condition('theme', 'elmcip')
    ->execute();

  print "Moved and enabled $num_updated block(s) to region header-top \n";
}

/**
 * Remove all orphaned actions from system.
 */
function elmcip_setup_update_7005() {
  actions_synchronize(actions_list(), TRUE);
}

/**
 * Enable new feature module elmcip_layout.
 */
function elmcip_setup_update_7006() {
  module_enable(array('elmcip_layout'), FALSE);
}

/**
 * Block update 7009 fail due to errors in block title. This should fix it.
 */
function elmcip_setup_update_7007() {
  db_query("UPDATE elmcip.block SET title = '' WHERE block.bid = 505");
  db_query("UPDATE elmcip.block SET title = '' WHERE block.bid = 506");
}

/**
 * Enable Entity reference module. Time to stop using node reference.
 */
function elmcip_setup_update_7008() {
  module_enable(array('entityreference'), FALSE);
}

/**
 * Migrate Person node reference field to entity reference.
 */
function elmcip_setup_update_7009() {
  module_enable(array('entityreference_migration'), FALSE);
  $drush_result = exec('drush -v emr field_affiliation');
  print("$drush_result\n");
  module_disable(array('entityreference_migration'), FALSE);
}

/**
 * Migrate Event node reference field to entity reference.
 */
function elmcip_setup_update_7010() {
  module_enable(array('entityreference_migration'), FALSE);
  // Clean up inconsistensy in our data to allow migration to run.
  db_query("DELETE FROM field_data_field_node_ref WHERE field_node_ref_nid IS NULL");
  $drush_result = exec('drush -v emr field_node_ref') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_individual_organizers') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_curator') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_associated_event') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_event_series') . "\n";
  print("$drush_result\n");
  module_disable(array('entityreference_migration'), FALSE);
}

/**
 * Migrate node ref fields in "Class Group" bundle to entity reference.
 */
function elmcip_setup_update_7011() {
  module_enable(array('entityreference_migration'), FALSE);
  $drush_result = exec('drush -v emr field_students') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_teacher_link') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_tr_link') . "\n";
  print("$drush_result\n");
  module_disable(array('entityreference_migration'), FALSE);
}

/**
 * Clean up inconsistensy in our data to allow migration to run.
 */
function elmcip_setup_update_7012() {
  db_query("DELETE FROM field_data_field_author_name WHERE field_author_name_nid IS NULL");
  db_query("DELETE FROM field_data_field_node_ref_event WHERE field_node_ref_event_nid IS NULL");
  db_query("DELETE FROM field_data_field_other_lang_ver_link WHERE field_other_lang_ver_link_nid IS NULL");
  db_query("DELETE FROM field_data_field_in_anthology WHERE field_in_anthology_nid IS NULL");
}

/**
 * Migrate node ref fields in "Creative work" bundle to entity reference.
 */
function elmcip_setup_update_7013() {
  module_enable(array('entityreference_migration'), FALSE);
  $drush_result = exec('drush -v emr field_author_name') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_contributor') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_translator') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_node_ref_event') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_other_lang_ver_link') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_other_edition_work') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_part_of_another_work') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_in_anthology') . "\n";
  print("$drush_result\n");
  module_disable(array('entityreference_migration'), FALSE);
}

/**
 * Delete unused fields from content type platform.
 */
function elmcip_setup_update_7014() {
  // Grab data from number field before nuking it and save data to
  // field_platform_year.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'platform_software')
    ->fieldCondition('field_number');

  $result = $query->execute();
  $news_items_nids = array_keys($result['node']);

  foreach ($news_items_nids as $nid) {
    try {
      $platform_entity = entity_metadata_wrapper('node', $nid);
      $year = strtotime($platform_entity->field_number->value() . '-01');
      $date = $platform_entity->field_platform_year->value();
      if ($year) {
        $platform_entity->field_platform_year->set($year);
        $platform_entity->save();
        drush_log("Updated field_platform_year: $nid", 'notice');
      }
    }
    catch (EntityMetadataWrapperException $exc) {
      // watchdog(
      //   'ELMCIP Setup',
      //   'See '  . __FUNCTION__ . '() <pre>' .  $exc->getTraceAsString() . '</pre>',
      //    NULL, WATCHDOG_ERROR
      // );
    }
  }

  // Delete unused field from bundle/system.
  $fields = array('field_number');
  foreach ($fields as $field) {
    $instance = field_info_instance('node', $field, 'platform_software');
    // field_delete_field($field);
  }
}

/**
 * Enable new feature module - elmcip_platform
 */
function elmcip_setup_update_7015() {
  module_enable(array('elmcip_platform'), FALSE);
}

/**
 * Uninstall RDF UI and External RDF Vocabulary Importer in production.
 */
function elmcip_setup_update_7016() {
  module_disable(array('rdfui', 'evoc'), TRUE);
  drupal_uninstall_modules(array('rdfui', 'evoc', 'entityreference_migration', 'ds_ui'), TRUE);
}

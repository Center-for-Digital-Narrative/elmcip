<?php
/**
 * @file
 * Install and uninstall code.
 */

/**
 * Enable new feature modles, elmcip_content_types, elmcip_field_instances and elmcip_permissions.
 */
function elmcip_setup_update_7002() {
  module_enable(array('elmcip_content_types', 'elmcip_field_instances', 'elmcip_permissions'));
}

/**
 * Remove settings and blocks blonging to wabi, pixture_reloaded, elmcip_bartik and adaptivetheme_admin.
 */
function elmcip_setup_update_7003() {
  $depricated_themes = array(
    'wabi',
    'pixture_reloaded',
    'elmcip_bartik',
    'adaptivetheme_admin',
  );

  // Delete settings from the $variables table.
  print "Removing theme settings from variables table\n";
  variable_del('color_pixture_reloaded_files');
  variable_del('color_pixture_reloaded_logo');
  variable_del('color_pixture_reloaded_palette');
  variable_del('color_pixture_reloaded_screenshot');
  variable_del('color_pixture_reloaded_stylesheets');
  variable_del('theme_pixture_reloaded_settings');
  variable_del('color_wabi_files');
  variable_del('color_wabi_logo');
  variable_del('color_wabi_palette');
  variable_del('color_wabi_screenshot');
  variable_del('color_wabi_stylesheets');
  variable_del('theme_wabi_settings');
  variable_del('color_elmcip_bartik_files');
  variable_del('color_elmcip_bartik_logo');
  variable_del('color_elmcip_bartik_palette');
  variable_del('color_elmcip_bartik_stylesheets');
  variable_del('theme_elmcip_bartik_settings');
  variable_del('theme_adaptivetheme_admin_settings');
  cache_clear_all('variables', 'cache_bootstrap');

  // Remove blocks registered to removed themes.
  foreach ($depricated_themes as $key => $theme) {
    $removed = db_delete('block')
      ->condition('theme', $theme)
      ->execute();
    print "Removed $removed depricated blocks from theme $theme\n";
  }
}

/**
 * Move system user-menu block from header to region-top.
 */
function elmcip_setup_update_7004() {
  $num_updated = db_update('block')
    ->fields(array(
      'region' => 'header_top',
      'status' => 1,
      'weight' => 1,
    ))
    ->condition('delta', 'user-menu')
    ->condition('theme', 'elmcip')
    ->execute();

  print "Moved and enabled $num_updated block(s) to region header-top \n";
}

/**
 * Remove all orphaned actions from system.
 */
function elmcip_setup_update_7005() {
  actions_synchronize(actions_list(), TRUE);
}

/**
 * Enable new feature module elmcip_layout.
 */
function elmcip_setup_update_7006() {
  module_enable(array('elmcip_layout'), FALSE);
}

/**
 * Block update 7009 fail due to errors in block title. This should fix it.
 */
function elmcip_setup_update_7007() {
  db_query("UPDATE elmcip.block SET title = '' WHERE block.bid = 505");
  db_query("UPDATE elmcip.block SET title = '' WHERE block.bid = 506");
}

/**
 * Enable Entity reference module. Time to stop using node reference.
 */
function elmcip_setup_update_7008() {
  module_enable(array('entityreference'), FALSE);
}

/**
 * Migrate Person node reference field to entity reference.
 */
function elmcip_setup_update_7009() {
  module_enable(array('entityreference_migration'), FALSE);
  $drush_result = exec('drush -v emr field_affiliation');
  print("$drush_result\n");
  module_disable(array('entityreference_migration'), FALSE);
}

/**
 * Migrate Event node reference field to entity reference.
 */
function elmcip_setup_update_7010() {
  module_enable(array('entityreference_migration'), FALSE);
  // Clean up inconsistensy in our data to allow migration to run.
  db_query("DELETE FROM field_data_field_node_ref WHERE field_node_ref_nid IS NULL");
  $drush_result = exec('drush -v emr field_node_ref') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_individual_organizers') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_curator') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_associated_event') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_event_series') . "\n";
  print("$drush_result\n");
  module_disable(array('entityreference_migration'), FALSE);
}

/**
 * Migrate node ref fields in "Class Group" bundle to entity reference.
 */
function elmcip_setup_update_7011() {
  module_enable(array('entityreference_migration'), FALSE);
  $drush_result = exec('drush -v emr field_students') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_teacher_link') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_tr_link') . "\n";
  print("$drush_result\n");
  module_disable(array('entityreference_migration'), FALSE);
}

/**
 * Clean up inconsistensy in our data to allow migration to run.
 */
function elmcip_setup_update_7012() {
  db_query("DELETE FROM field_data_field_author_name WHERE field_author_name_nid IS NULL");
  db_query("DELETE FROM field_data_field_node_ref_event WHERE field_node_ref_event_nid IS NULL");
  db_query("DELETE FROM field_data_field_other_lang_ver_link WHERE field_other_lang_ver_link_nid IS NULL");
  db_query("DELETE FROM field_data_field_in_anthology WHERE field_in_anthology_nid IS NULL");
}

/**
 * Migrate node ref fields in "Creative work" bundle to entity reference.
 */
function elmcip_setup_update_7013() {
  module_enable(array('entityreference_migration'), FALSE);
  $drush_result = exec('drush -v emr field_author_name') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_contributor') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_translator') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_node_ref_event') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_other_lang_ver_link') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_other_edition_work') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_part_of_another_work') . "\n";
  $drush_result .= ' ' . exec('drush -v emr field_in_anthology') . "\n";
  print("$drush_result\n");
  module_disable(array('entityreference_migration'), FALSE);
}

/**
 * Delete unused fields from content type platform.
 */
function elmcip_setup_update_7014() {
  // Grab data from number field before nuking it and save data to
  // field_platform_year.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'platform_software')
    ->fieldCondition('field_number');

  $result = $query->execute();
  $news_items_nids = array_keys($result['node']);

  foreach ($news_items_nids as $nid) {
    try {
      $platform_entity = entity_metadata_wrapper('node', $nid);
      $year = strtotime($platform_entity->field_number->value() . '-01');
      $date = $platform_entity->field_platform_year->value();
      if ($year) {
        $platform_entity->field_platform_year->set($year);
        $platform_entity->save();
        drush_log("Updated field_platform_year: $nid", 'notice');
      }
    }
    catch (EntityMetadataWrapperException $exc) {
      // watchdog(
      //   'ELMCIP Setup',
      //   'See '  . __FUNCTION__ . '() <pre>' .  $exc->getTraceAsString() . '</pre>',
      //    NULL, WATCHDOG_ERROR
      // );
    }
  }

  // Delete unused field from bundle/system.
  $fields = array('field_number');
  foreach ($fields as $field) {
    $instance = field_info_instance('node', $field, 'platform_software');
    // field_delete_field($field);
  }
}

/**
 * Enable new feature module - elmcip_platform
 */
function elmcip_setup_update_7015() {
  module_enable(array('elmcip_platform'), FALSE);
}

/**
 * Uninstall RDF UI and External RDF Vocabulary Importer in production.
 */
function elmcip_setup_update_7016() {
  module_disable(array('rdfui', 'evoc'), TRUE);
  drupal_uninstall_modules(array('rdfui', 'evoc', 'entityreference_migration', 'ds_ui'), TRUE);
}

/**
 * Uninstall token tweaks in production.
 */
function elmcip_setup_update_7017() {
  module_disable(array('token_tweaks'), FALSE);
  drupal_uninstall_modules(array('token_tweaks'), FALSE);
}

/**
 * Remove 5000 cache files pr. cron run.
 */
function elmcip_setup_update_7018() {
  variable_set('views_data_export_gc_chunk', 5000);
}

/**
 * Disable update module from production. Is enabled in a devel. enviroment.
 */
function elmcip_setup_update_7019() {
  module_disable(array('update'), TRUE);
  drupal_uninstall_modules(array('update'), TRUE);
}

/**
 * Remove file_styles and styles module and any settings belongings.
 */
function elmcip_setup_update_7020() {
  module_disable(array('file_styles', 'styles'), TRUE);
  drupal_uninstall_modules(array('file_styles', 'styles'), TRUE);
  variable_del('file_styles__preview_image');
}

/**
 * Creative Work - Copy data from field_number to field_work_year.
 */
function elmcip_setup_update_7021() {

  // Create field to store year data before deprecated field get dropped.
  $newField = array(
    'field_name' => 'field_work_year',
    'type' => 'date',
    'label' => 'Year',
    'description' => 'Year in which the work was first published. If the work
      changed on an ongoing basis over time, indicate the period in the work
      description.',
  );
  field_create_field($newField);

  $instance = array(
    'field_name' => $newField['field_name'],
    'entity_type' => 'node',
    'bundle' => 'work',
  );
  field_create_instance($instance);

  // Grab data from number field before nuking it and save data to
  // field_platform_year.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'work')
    ->fieldCondition('field_number');

  $result = $query->execute();
  $news_items_nids = array_keys($result['node']);

  foreach ($news_items_nids as $nid) {
    try {
      $work_entity = entity_metadata_wrapper('node', $nid);
      $year = strtotime('01/01 00:00 UTC' . $work_entity->field_number->value());
      if ($year) {
        $work_entity->field_work_year->set($year);
        $work_entity->save();
        print("Updated field_work_year: $nid" . PHP_EOL);
      }
    }
    catch (EntityMetadataWrapperException $exc) {
      watchdog(
        'ELMCIP Setup',
        'See '  . __FUNCTION__ . '() <pre>' .  $exc->getTraceAsString() . '</pre>',
         NULL, WATCHDOG_ERROR
      );
    }
  }

  // Delete unused field from bundle.
  $fields = array('field_number');
  foreach ($fields as $field) {
    $instance = field_info_instance('node', $field, 'work');
    field_delete_instance($instance, TRUE);
  }
}

/**
 * Disable auto_nodetitle. Update all person records cleaning up names & titles.
 */
function elmcip_setup_update_7022() {
  module_disable(array('auto_nodetitle'), TRUE);
  drupal_uninstall_modules(array('auto_nodetitle'), TRUE);

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'person');

  $result = $query->execute();
  $news_items_nids = array_keys($result['node']);

  foreach ($news_items_nids as $nid) {
    $node = node_load($nid);
    $person = entity_metadata_wrapper('node', $node);
    $name = '';
    if ($person->field_first_name->value()) {
      $name .= trim($person->field_first_name->value());
      $person->field_first_name->set(trim($person->field_first_name->value()));
    }
    if ($person->field_middle_name->value()) {
      $name .= ' ' . trim($person->field_middle_name->value());
      $person->field_middle_name->set(trim($person->field_middle_name->value()));
    }
    if ($person->field_last_name->value()) {
      $name .= ' ' . trim($person->field_last_name->value());
      $person->field_last_name->set(trim($person->field_last_name->value()));
    }

    field_attach_presave('node', $node);
    field_attach_update('node', $node);
    print 'Updated node: ' . $nid . PHP_EOL;
  }
}

/**
 * Enable views_oai_pmh module and feature module - elmcip_creative_work.
 */
function elmcip_setup_update_7023() {
  module_enable(array('views_oai_pmh', 'elmcip_creative_work'), 'FALSE');
}

/**
 * Delete fields no longer used: field_anthology_submission and field_anthology_selection.
 */
function elmcip_setup_update_7024() {
  $fields = array('field_anthology_selection', 'field_anthology_submission');
  foreach ($fields as $field) {
    field_delete_field($field);
  }
}

/**
 * Enable feature module ELMCIP permission.
 */
function elmcip_setup_update_7025() {
  module_enable(array('elmcip_permissions'), FALSE);
}

/**
 * Migrate Event node reference field to entity reference.
 */
function elmcip_setup_update_7026() {
  module_enable(array('entityreference_migration'), FALSE);
  // Clean up inconsistensy in our data to allow migration to run.
  // db_query("DELETE FROM field_data_field_node_ref WHERE field_node_ref_nid IS NULL");
  print "Cleaning up field: field_data_field_editor_name" . PHP_EOL;
  db_query("DELETE FROM field_data_field_editor_name WHERE field_editor_name_nid IS NULL");

  print "Migrating fields" . PHP_EOL;
  exec('drush -v emr field_editor_name') . "\n";
  exec('drush -v emr field_events') . "\n";

  module_disable(array('entityreference_migration'), FALSE);
  drupal_uninstall_modules(array('entityreference_migration'), FALSE);
}

/**
 * Uninstall views_bulk_operations module.
 */
function elmcip_setup_update_7027() {
  module_disable(array('views_bulk_operations'), TRUE);
  drupal_uninstall_modules(array('views_bulk_operations'), TRUE);
}

/**
 * Remove leftover settings/data from auto_nodetitle module.
 */
function elmcip_setup_update_7028() {
  $auto_nodetitle = array(
    'auto_nodetitle_php_critical_writing',
    'auto_nodetitle_php_event',
    'auto_nodetitle_php_faq',
    'auto_nodetitle_php_organization',
    'auto_nodetitle_php_person',
    'auto_nodetitle_php_publisher',
    'auto_nodetitle_php_story',
    'auto_nodetitle_php_teaching_resource',
    'auto_nodetitle_php_work',
  );
  foreach ($auto_nodetitle as $variable) {
    variable_del($variable);
  }
}

/**
 * Enable module - views base url, cell_oai_pmh needed by OAI-PMH view.
 */
function elmcip_setup_update_7029() {
  module_enable(array('views_base_url', 'cell_oai_pmh'), FALSE);
}

/**
 * Delete field_orig_lang.
 */
function elmcip_setup_update_7030() {
  field_delete_field('field_orig_lang');
}

/**
 * Uninstall module - getid3.
 */
function elmcip_setup_update_7031() {
  module_disable(array('getid3'), false);
  drupal_uninstall_modules(array('getid3'), false);
}

/**
 * Enable module - ELMCIP views platform organization.
 */
function elmcip_setup_update_7032(){
  module_enable(array('elmcip_views_platform_organization'), FALSE);
}

/**
 * Uninstall module Auto nodetitle.
 */
function elmcip_setup_update_7033() {
  drupal_uninstall_modules(array('auto_nodetitle'), TRUE);
}

/**
 * Disable Rules modules.
 */
function elmcip_setup_update_7034() {
  module_disable(array('rules_admin', 'rules_scheduler', 'rules'), TRUE);
  drupal_uninstall_modules(array('rules_admin', 'rules_scheduler', 'rules'), TRUE);
}

/**
 * Enable Helper module.
 */
function elmcip_setup_update_7035() {
  module_enable(array('helper'), FALSE);
}

/**
 * Change leagacy fields to file field.
 */
function elmcip_setup_update_7036() {
  // Get a list of all fields.
  $fields = field_info_field_map();

  // Obtain the machine name of all image fields and store them in an array.
  foreach ($fields as $name => $field) {
    if ($field['type'] == 'media') {
      $image_fields[$name] = $field;
    }
  }

  // Loop through the list and convert them into file field.
  if (!empty($image_fields)) {
    foreach ($image_fields as $name => $field) {
      $results[$name] = FieldChangeHelper::changeType($name, 'file');
    }
  }
}

/**
 * Uninstall mediafield and helper module.
 */
function elmcip_setup_update_7037() {
  module_disable(array('mediafield', 'helper'), FALSE);
  drupal_uninstall_modules(array('mediafield', 'helper'), FALSE);
}

/**
 * Uninstall module Media Slideshare.
 */
function elmcip_setup_update_7038() {
  module_disable(array('media_slideshare'), FALSE);
  drupal_uninstall_modules(array('media_slideshare'), FALSE);
}

/**
 * Migrate from node to entity reference.
 */
function elmcip_setup_update_7039() {
  module_enable(array('entityreference_migration'), FALSE);

  // Delete broken entries field_node_ref_work.
  db_query("DELETE FROM field_data_field_node_ref_work WHERE field_node_ref_work_nid IS NULL");

  // Delete broken entiries in field_inbook_target_id.
  db_query("DELETE FROM field_data_field_inbook WHERE field_inbook_nid IS NULL");

  /**
   * Fields to migrate:
   *
   * field_university (University)
   * field_other_edition_link (Other edition)
   * field_series_ref (Series)
   * field_inbook (Appears in)
   * field_node_ref_work (Creative Works referenced)
   * field_tr_critical (Critical Writing referenced) * shared - (Teaching Resource)
   * field_ref_about_event (Event Referenced)
   * field_organization_cw (Organization referenced)
   * field_publisher_referenced (Publisher Referenced)
   * field_database_or_archive_refere (Database or Archive reference) * shared (Teaching Resource)
   */
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_university"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_other_edition_link"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_series_ref"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_inbook"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_node_ref_work"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_tr_critical"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_ref_about_event"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_organization_cw"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_publisher_referenced"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_database_or_archive_refere"), array("verbose"));
  module_disable(array('entityreference_migration'), FALSE);
  drupal_uninstall_modules(array('entityreference_migration'), FALSE);
}

/**
 * Enable ELMCIP Search module.
 */
function elmcip_setup_update_7040() {
  $items = 500;
  $search_index = '';
  module_enable(array('elmcip_search'), TRUE);
  print 'Create beta search index' . PHP_EOL;
  $search_index = search_api_index_load('kb_content');
  while ($items != 0) {
    $items = search_api_index_items($search_index, 500);
    print "Indexed $items" . PHP_EOL;
  }

  print("New search indexed created." . PHP_EOL);
}

/**
 * Migrate Research Collection node reference fields to entity reference.
 */
function elmcip_setup_update_7041() {
    module_enable(array('entityreference_migration'), FALSE);
    /**
     * Fields to be converted:
     *
     * field_collection_curated_by (Collection curated by)
     * field_collection_contributors (Collection contributors)
     * field_people ()
     * field_creative_works (Creative works)
     * field_critical_writing (Critical writing)
     * field_organizations (Organizations)
     * field_publishers (Publishers)
     * field_teaching_resources (Teaching Resources)
     * field_rc_db_archive (Database or Archive reference)
     */
    print ("Migrating fields" . PHP_EOL);
    drush_invoke_process("@site", "entityreference-migrate-references", array("field_collection_curated_by"), array("verbose"));
    drush_invoke_process("@site", "entityreference-migrate-references", array("field_collection_contributors"), array("verbose"));
    drush_invoke_process("@site", "entityreference-migrate-references", array("field_people"), array("verbose"));
    drush_invoke_process("@site", "entityreference-migrate-references", array("field_creative_works"), array("verbose"));
    drush_invoke_process("@site", "entityreference-migrate-references", array("field_critical_writing"), array("verbose"));
    drush_invoke_process("@site", "entityreference-migrate-references", array("field_organizations"), array("verbose"));
    drush_invoke_process("@site", "entityreference-migrate-references", array("field_publishers"), array("verbose"));
    drush_invoke_process("@site", "entityreference-migrate-references", array("field_teaching_resources"), array("verbose"));
    drush_invoke_process("@site", "entityreference-migrate-references", array("field_rc_db_archive"), array("verbose"));
    module_disable(array('entityreference_migration'), FALSE);
    drupal_uninstall_modules(array('entityreference_migration'), FALSE);
}

/**
 * Convert numeric value to real time/date field.
 */
function elmcip_setup_update_7042() {
    $news_items_nids = '';
    // Create field to store year data before deprecated field get dropped.
    $newField = array(
        'field_name' => 'field_critical_writing_year',
        'type' => 'date',
        'label' => 'Year',
        'description' => 'Year in which the work was first published. If the work
      changed on an ongoing basis over time, indicate the period in the work
      description.',
  );
  field_create_field($newField);

  $instance = array(
      'field_name' => $newField['field_name'],
      'entity_type' => 'node',
      'bundle' => 'critical_writing',
  );
  field_create_instance($instance);

  // Grab data and save data to the new field.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'critical_writing')
      ->fieldCondition('field_number');

  $result = $query->execute();
  $news_items_nids = array_keys($result['node']);

  foreach ($news_items_nids as $nid) {
    try {
      $work_entity = entity_metadata_wrapper('node', $nid);

      // Fix nodes containing broken/bad taxonomy term ID.
      $taxonomy_terms = array();
      $taxonomy_terms = $work_entity->taxonomy_vocabulary_1;
      if ($taxonomy_terms) {
        foreach ($taxonomy_terms as $key => $term) {
          $tid = FALSE;
          $tid = $work_entity->taxonomy_vocabulary_1[$key]->value();
          if (!$tid) {
            $work_entity->taxonomy_vocabulary_1[$key]->set(NULL);
          }
        }
      }

      $year = strtotime('01/01 00:00 UTC' . $work_entity->field_number->value());
      if ($year) {
        $work_entity->field_critical_writing_year->set($year);
        $work_entity->save();
        print("Stored $year into field_work_year: $nid" . PHP_EOL);
      }
    }
    catch (EntityMetadataWrapperException $exc) {
      watchdog(
          'ELMCIP Setup',
          'See '  . __FUNCTION__ . '() <pre>' .  $exc->getTraceAsString() . '</pre>',
          NULL, WATCHDOG_ERROR
      );
    }
  }

  // Delete unused field from bundle.
  $fields = array('field_number');
  foreach ($fields as $field) {
    $instance = field_info_instance('node', $field, 'critical_writing');
    field_delete_instance($instance, TRUE);
  }
}

/**
 * Uninstall module Media Slideshare.
 */
function elmcip_setup_update_7043() {
  module_disable(array('media_slideshare'), FALSE);
  drupal_uninstall_modules(array('media_slideshare'), FALSE);
}

/**
 * Migrate Teaching Resource record to entity reference.
 */
function elmcip_setup_update_7044() {
  module_enable(array('entityreference_migration'), FALSE);
  /**
   * Fields to be converted:
   *
   * field_tr_author (Author)
   * field_tr_org (Organization)
   * field_tr_work (Creative Works Referenced)
   * field_tr_tr (Teaching Resource Referenced)
   */
  print ("Migrating fields" . PHP_EOL);
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_tr_author"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_tr_org"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_tr_work"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_tr_tr"), array("verbose"));
  module_disable(array('entityreference_migration'), FALSE);
  drupal_uninstall_modules(array('entityreference_migration'), FALSE);
}

/**
 * Migrate Databases and Archives record to entity reference.
 */
function elmcip_setup_update_7045() {
  module_enable(array('entityreference_migration'), FALSE);
  /**
   * Fields to be converted:
   *
   * field_db_org (Organization)
   * field_db_people (Key People)
   * field_db_cross_event (Events)
   * field_db_cross_cw (Critical Writing)
   */
  print ("Migrating fields" . PHP_EOL);
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_db_org"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_db_people"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_db_cross_event"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_db_cross_cw"), array("verbose"));
  module_disable(array('entityreference_migration'), FALSE);
  drupal_uninstall_modules(array('entityreference_migration'), FALSE);
}

/**
 * Migrate notebook entry record to entity reference.
 */
function elmcip_setup_update_7046() {
  module_enable(array('entityreference_migration'), FALSE);
  /**
   * Fields to be converted:
   *
   * Notebook field_notebok
   * Work noted field_work_noted
   * Critical Writing noted field_cw_noted
   * Author noted field_author_noted
   * Event noted field_event_noted
   */
  print ("Migrating fields" . PHP_EOL);
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_notebok"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_work_noted"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_cw_noted"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_author_noted"), array("verbose"));
  drush_invoke_process("@site", "entityreference-migrate-references", array("field_event_noted"), array("verbose"));
  module_disable(array('entityreference_migration'), FALSE);
  drupal_uninstall_modules(array('entityreference_migration'), FALSE);
}

<?php
/**
 * @file
 * Code for the Setup ELMCIP feature.
 */

include_once 'elmcip_setup.features.inc';

/**
 * Implements hook_block_info().
 */
function elmcip_setup_block_info() {
  $blocks['sosical_networks'] = array(
    'info' => t('Social networks associated with ELMCIP'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'status' => 0,
  );

  $blocks['sponsors'] = array(
    'info' => t('ELMCIP sponsors'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'status' => 0,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function elmcip_setup_block_view($delta = '') {
  $block = [];

  switch ($delta) {
    case 'sosical_networks':
      $content =  [
        '#type' => 'markup',
        '#markup' => '
        <ul class="menu social">
          <li><a href="https://vimeo.com/elmcip"><i class="fa fa-vimeo-square"></i></a></li>
          <li><a href="https://twitter.com/elmcip"><i class="fa fa-twitter-square"></i></a></li>
          <li><a href="https://www.facebook.com/groups/480202502024095"><i class="fa fa-facebook-square"></i></a></li>
        </ul>',
      ];
      $block = [
        'content' => render($content),
      ];
      break;
    case 'sponsors':
      $content =  [
        '#type' => 'markup',
        '#markup' => '
        <p>
          <map id="sponsorblock" name="sponsorblock">
            <area alt="HERA (Humanities in the European Research Area)" coords="9,16,180,61" href="http://www.heranet.info" shape="rect" target="_blank" title="HERA (Humanities in the European Research Area)">
            <area alt="NorStore" coords="417,19,545,53" href="https://www.norstore.no/" shape="rect" target="_blank" title="NorStore">
            <area alt="CLARINO (Common Language Resources and Technology Infrastructure Norway)" coords="557,20,665,52" href="http://clarin.b.uib.no/" shape="rect" target="_blank" title="CLARINO (Common Language Resources and Technology Infrastructure Norway)">
            <area alt="University of Bergen, Department of Linguistic, Literary and Aesthetic Studies" coords="373,37,33" href="http://www.uib.no/en/lle" shape="circle" target="_blank" title="University of Bergen, Department of Linguistic, Literary and Aesthetic Studies">
            <area alt="Bergen Electronic Literature Research Group" coords="254,77,422,147" href="http://www.uib.no/en/rg/electronicliterature" shape="rect" target="_blank" title="Bergen Electronic Literature Research Group">
            <area alt="European Commission, European Research Area" coords="189,8,331,63" href="http://ec.europa.eu/research/era/index_en.htm" shape="rect" target="_blank" title="European Commission, European Research Area">
          </map>
          <img alt="ELMCIP sponsors" src="/sites/all/themes/elmcip/images/sponsors/elmcip_sponsors.png" usemap="#sponsorblock" />
          <p>
              This Work, ELMCIP, is licensed under a <a href="http://creativecommons.org/licenses/by-sa/2.5/" target="_blank">Creative Commons Attribution-ShareAlike license <img alt="creative commons" src="/sites/all/themes/elmcip/images/sponsors/cc_logo.png" /></a>, although certain works referenced herein may be separately licensed.
          </p>
      </p>',
      ];
      $block = [
        'content' => render($content),
      ];
      break;
  }

  return $block;
}

/**
 * Implements hook_node_presave().
 */
function elmcip_setup_node_presave($node) {
  if ($node->type == 'person') {
    $entity_updated = entity_metadata_wrapper('node', $node);
    $nodeTitle = FALSE;
    $firstName = trim($entity_updated->field_first_name->value());
    $middleName = trim($entity_updated->field_middle_name->value());
    $lastName = trim($entity_updated->field_last_name->value());

    if ($firstName) {
      $nodeTitle = $firstName;
      $entity_updated->field_first_name->set($firstName);
    }
    else {
      $entity_updated->field_first_name->set(NULL);
    }

    if ($middleName) {
      if ($firstName) {
        $nodeTitle .= ' ' . $middleName;
      }
      else {
        $nodeTitle = $middleName;
      }
      $entity_updated->field_middle_name->set($middleName);
    }
    else {
      $entity_updated->field_middle_name->set(NULL);
    }

    if ($lastName) {
      if ($firstName || $middleName) {
        $nodeTitle .= ' ' . $lastName;
      }
      else {
        $nodeTitle = $lastName;
      }
      $entity_updated->field_last_name->set($lastName);
    }
    else {
      $entity_updated->field_last_name->set(NULL);
    }

    if ($nodeTitle) {
      $entity_updated->title->set($nodeTitle);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function elmcip_setup_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'person_node_form':
      $form['title']['#type'] = 'hidden';
      $form['title']['#default_value'] = 'ELMCIP auto generated - dummy';
      break;
    case 'taxonomy_form_term':
      $form['description']['#format'] = filter_fallback_format();
      $form['#after_build'][] = 'configure_term_form';
      break;
    case 'work_node_form':
      $form['title']['#description'] = t('Indicate the title of the work. If it has a subtitle, place the subtitle text after a colon.', array('type' => $form['type']['#value']));
      $form['#custom_togle'] = 'field_abstract_lang_tax';
      $form['#custom_field'] = 'field_abstract_lang';
      $form['#validate'] = [
        'elmcip_form_validate',
        'elmcip_setup_doi_field_validate',
      ];
      _elmcip_form_helper($form);
      break;
    case 'critical_writing_node_form':
      $form['title']['#description'] = t('Indicate the title of the work. If it has a subtitle, place the subtitle text after a colon.', array('type' => $form['type']['#value']));
      $form['#custom_togle'] = 'field_abstract_lang_tax';
      $form['#custom_field'] = 'field_abstract_lang';
      $form['#validate'] = [
        'elmcip_form_validate',
        'elmcip_setup_doi_field_validate',
      ];
      _elmcip_form_helper($form);
      break;
    case 'platform_software_node_form':
      $form['title']['#description'] = t('Enter the name of the platform/software.', array('type' => $form['type']['#value']));
      break;
    case 'teaching_resource_node_form':
      $form['title']['#description'] = t('Enter the title of the teaching resource. If the teaching resource is a syllabus for a course, enter the title of the course in the following format: Title: Subtitle (Course number, Semester year). For example, <i>Digital Genres: Digital Art, Electronic Literature, and Computer Games (DIKULT 103, Spring 2011)</i>.', array('type' => $form['type']['#value']));
      $form['#custom_togle'] = 'field_abstract_lang_tax';
      $form['#custom_field'] = 'field_abstract_lang';
      $form['#validate'][] = 'elmcip_form_validate';
      _elmcip_form_helper($form);
      break;
    case 'publisher_node_form':
      $form['title']['#description'] = t('Enter the name of the publisher.', array('type' => $form['type']['#value']));
      break;
    case 'organization_node_form':
      $form['title']['#description'] = t('Enter the name of the organization.', array('type' => $form['type']['#value']));
      break;
    case 'event_node_form':
      $form['title']['#description'] = t('Enter the name of the event.', array('type' => $form['type']['#value']));
      $form['#custom_togle'] = 'field_event_abstract_lang_tax';
      $form['#custom_field'] = 'field_event_abstract_lang';
      $form['#validate'][] = 'elmcip_form_validate';
      _elmcip_form_helper($form);
      break;
    case 'databases_and_archives_node_form':
      $form['title']['#description'] = t('Enter the official name of the database or archive. If the resource is commonly referred to by an acronym (e.g. ELD for the Electronic Literature Directory), this can be specified in description.', array('type' => $form['type']['#value']));
      $form['#custom_togle'] = 'field_db_description_org_lang';
      $form['#custom_field'] = 'field_db_description_original';
      $form['#validate'][] = 'elmcip_form_validate';
      _elmcip_form_helper($form);
      break;
    case 'research_collection_node_form':
      $form['title']['#description'] = t('Create a title for the resource collection', array('type' => $form['type']['#value']));
      break;
  }
}

/**
 * DOI custom validator. Make sure DOI is not a URL.
 *
 * @param $form
 * @param $form_state
 */
function elmcip_setup_doi_field_validate($form, &$form_state) {
  if ($form_state['values']['field_doi']['und'][0]['value']) {
    foreach ($form_state['values']['field_doi']['und'] as $delta => $value) {

      if (!elmcip_setup_doi_validate($value['value'])) {
        form_set_error('field_doi', 'DOI cannot be a URL. DOI always start with the numeric value 10.');
      }
    }
  }
}

/**
 * Check if DOI starts with the value 10.
 *
 * @param $value
 * @return bool
 */
function elmcip_setup_doi_validate($value) {
  return strpos(trim($value), '10') === 0;
}

/**
 * Custom node form validation. Make sure that description or abstract in
 * original language get removed if the language is not set.
 *
 * @param $form
 * @param $form_state
 */
function elmcip_form_validate($form, &$form_state) {
  if (!$form_state['values'][$form['#custom_togle']][LANGUAGE_NONE][0]['tid']) {
    $form_state['values'][$form['#custom_field']][LANGUAGE_NONE][0]['value'] = '';
  }
}

/**
 * ELMCIP helper function. Hide form if the orginal description or abstract
 * language is empty.
 *
 * @param $form
 */
function _elmcip_form_helper(&$form) {
  $form[$form['#custom_field']]['#states'] = array(
    'invisible' => array(
      'select[name="' . $form['#custom_togle'] . '[' . LANGUAGE_NONE . ']' . '"]' => array('value' => '_none'),
    ),
  );
}

/**
 * Implements hook_element_info_alter().
 *
 * @param $type
 */
function elmcip_setup_element_info_alter(&$type) {
  if (isset($type['link_field'])) {
    $type['link_field']['#process'][] = 'elmcip_setup_link_field_process';
  }
}

/**
 * Implements template_link_field_process().
 *
 * @param $element
 *
 * @return mixed $element
 */
function elmcip_setup_link_field_process($element) {
  if ($element['#bundle'] == 'work') {
    if ($element['#field_name'] == 'field_worldcat_link') {
      $element['title']['#title'] = t('Year of publication');
      unset($element['title']['#description']);
    }
  }

  if ($element['#bundle'] == 'critical_writing') {
    if ($element['#field_name'] == 'field_worldcat_link') {
      $element['title']['#title'] = t('Edition year');
      unset($element['title']['#description']);
    }
  }

  if ($element['#bundle'] == 'databases_and_archives') {
    if ($element['#field_name'] == 'field_url') {
      $element['title']['#title'] = t('Name of resource');
    }
  }

  return $element;
}

/**
 * Remove input format selector and markup guidelines.
 *
 * @param $form
 * @return mixed
 */
function configure_term_form($form) {
  $form['description']['format']['format']['#access'] = FALSE;
  $form['description']['format']['help']['#access'] = FALSE;
  $form['description']['format']['guidelines']['#access'] = FALSE;

  return $form;
}

/**
 * Implements hook_field_formatter_info().
 */
function elmcip_setup_field_formatter_info() {
  return array(
    'elmcip_setup_term_name_with_tid' => array(
      'label' => t('Term tid'),
      'field types' => array('taxonomy_term_reference'),
    ),
    'elmcip_setup_doi' => [
      'label' => t('Digital Object Identifier'),
      'field types' => ['text'],
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ],
  );
}

function elmcip_setup_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'elmcip_setup_term_name_with_tid':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => $item['tid'],
        );
      }
      break;
    case 'elmcip_setup_doi':
      foreach ($items as $delta => $item) {
        $element[$delta] = [
          '#markup' => elmcip_setup_doi_formatter($item['safe_value']),
        ];
      }
      break;
  }

  return $element;
}

function elmcip_setup_doi_formatter(string $url) {
  $url = trim($url);

  return l($url, 'https://dx.doi.org/' . $url);
}

/**
 * Implements hook_menu_alter().
 */
function elmcip_setup_menu_alter(&$items) {
  unset($items['node']); // Remove Drupal hardcoded front page.

  if ($items["entityreference/autocomplete/single/%/%/%"]) {
    $items["entityreference/autocomplete/single/%/%/%"]['page callback'] = 'elmcip_autocomplete_callback';
  }
}

/**
 * Menu callback. Take over control from entity reference to allow us to
 * alter the number of matches returned by the autocomplete widget.
 *
 * Ref. https://www.drupal.org/project/drupal/issues/2863188
 *      https://www.drupal.org/project/entityreference/issues/1700112
 *
 * @param $type
 * @param $field_name
 * @param $entity_type
 * @param $bundle_name
 * @param string $entity_id
 * @param string $string
 * @return int
 */
function elmcip_autocomplete_callback($type, $field_name, $entity_type, $bundle_name, $entity_id = '', $string = '') {
  // If the request has a '/' in the search text, then the menu system will have
  // split it into multiple arguments and $string will only be a partial.
  // We want to make sure we recover the intended $string.
  $args = func_get_args();
  // Shift off the $type, $field_name, $entity_type,
  // $bundle_name, and $entity_id args.
  array_shift($args);
  array_shift($args);
  array_shift($args);
  array_shift($args);
  array_shift($args);
  $string = implode('/', $args);

  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle_name);

  return elmcip_autocomplete_callback_get_matches($type, $field, $instance, $entity_type, $entity_id, $string);
}

/**
 * Return JSON based on given field, instance and string.
 *
 * This function can be used by other modules that wish to pass a mocked
 * definition of the field on instance.
 *
 * @param $type
 *   The widget type (i.e. 'single' or 'tags').
 * @param $field
 *   The field array defintion.
 * @param $instance
 *   The instance array defintion.
 * @param $entity_type
 *   The entity type.
 * @param $entity_id
 *   Optional; The entity ID the entity-reference field is attached to.
 *   Defaults to ''.
 * @param $string
 *   The label of the entity to query by.
 *
 * @return
 */
function elmcip_autocomplete_callback_get_matches($type, $field, $instance, $entity_type, $entity_id = '', $string = '') {
  $matches = array();
  $prefix = '';

  $entity = NULL;
  if ($entity_id !== 'NULL') {
    $entity = entity_load_single($entity_type, $entity_id);
    $has_view_access = (entity_access('view', $entity_type, $entity) !== FALSE);
    $has_update_access = (entity_access('update', $entity_type, $entity) !== FALSE);
    if (!$entity || !($has_view_access || $has_update_access)) {
      return MENU_ACCESS_DENIED;
    }
  }

  $handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);

  if ($type == 'tags') {
    // The user enters a comma-separated list of tags.
    // We only autocomplete the last tag.
    $tags_typed = drupal_explode_tags($string);
    $tag_last = drupal_strtolower(array_pop($tags_typed));
    if (!empty($tag_last)) {
      $prefix = count($tags_typed) ? implode(', ', $tags_typed) . ', ' : '';
    }
  }
  else {
    // The user enters a single tag.
    $tag_last = $string;
  }

  if (isset($tag_last)) {
    // Get an array of matching entities.
    $entity_labels = $handler->getReferencableEntities($tag_last, $instance['widget']['settings']['match_operator'], 20);
    $denied_label = t(ENTITYREFERENCE_DENIED);
    // Loop through the products and convert them into autocomplete output.
    foreach ($entity_labels as $values) {
      foreach ($values as $entity_id => $label) {
        // Never autocomplete entities that aren't accessible.
        if ($label == $denied_label) {
          continue;
        }
        $key = "$label ($entity_id)";
        // Strip starting/trailing white spaces, line breaks and tags.
        $key = preg_replace('/\s\s+/', ' ', str_replace("\n", '', trim(decode_entities(strip_tags($key)))));
        // Names containing commas or quotes must be wrapped in quotes.
        if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
          $key = '"' . str_replace('"', '""', $key) . '"';
        }
        $matches[$prefix . $key] = '<div class="reference-autocomplete">' . $label . '</div>';
      }
    }
  }

  drupal_json_output($matches);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function elmcip_setup_form_node_form_alter(&$form) {
  // Only content type story can be promoted or sticky.
  if ($form['#node']->type !== 'story') {
    $options = array('promote', 'sticky');
    foreach ($options as $key) {
      $form['options'][$key]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function elmcip_setup_form_node_admin_content_alter(&$form) {
  // Content overview page no longer have these batch options.
  $options = array('demote', 'promote', 'sticky', 'unsticky', );
  foreach ($options as $key) {
    unset($form['admin']['options']['operation']['#options'][$key]);
  }
}

function elmcip_setup_ds_pre_render_alter(&$layout_render_array, $context, &$variables) {

  $allowed_to_flag = $variables['user']->uid === '1' || in_array('Librarian', $variables['user']->roles, TRUE);

  if (!$allowed_to_flag && $variables['view_mode'] === 'full') {
    $allowed_to_view  = elmcip_setup_allowed_to_view_flag($variables);
    $message = '<div class="not-approved">Not approved by librarian</div>';

    if (!$allowed_to_view) {
      return;
    }

    $flagged = elmcip_setup_is_it_flagged($variables);

    if ($flagged) {
      $message = '<div class="approved">Approved by librarian</div>';
    }

    $layout_render_array['left']['Librarian'] = [
      '#type' => 'markup',
      '#markup' => $message,
      '#weight' => 100,
    ];
  }
}

/**
 * @param array $variables
 * @return bool
 */
function elmcip_setup_is_it_flagged(array $variables) {
  $flag = flag_get_flag('librarian_approved');
  return $flag->is_flagged($variables['nid']);
}

/**
 * Is user allowed to view flag status.
 *
 * @param array $variables
 *
 * @return bool $result
 *   Returns true of the user is allowed, false if not.
 */
function elmcip_setup_allowed_to_view_flag(array $variables) {
  $allowed_to_view = FALSE;
  $roles_allowed = ['editor', 'administrator', 'administrative editor'];
  foreach ($roles_allowed as $role_allowed) {
    if (in_array($role_allowed, $variables['user']->roles, true)) {
      $allowed_to_view = TRUE;
    }
  }

  return $allowed_to_view;
}

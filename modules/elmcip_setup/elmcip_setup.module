<?php
/**
 * @file
 * Code for the Setup ELMCIP feature.
 */

include_once 'elmcip_setup.features.inc';

/**
 * Remove temporary index tables from views_export.
 *
 * Temporary index tables that have been left
 * behind. This is caused by batch processes which are
 * started but never finished.
 */
function elmcip_setup_update_7001() {
  if (module_exists('views_data_export')) {
    views_data_export_garbage_collect(0, -1);
  }
}

/**
 * Implements hook_block_info().
 */
function elmcip_setup_block_info() {
  return array('sosical_networks' => array(
    'info' => t('Social networks assosiated with ELMCIP.'),
    'cache' => 'DRUPAL_CACHE_GLOBAL',
    'weight' => 0,
    'status' => 1,
    'region' => 'header_top',
    'theme' => 'elmcip',
  ));
}

/**
 * Implements hook_block_view().
 */
function elmcip_setup_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'sosical_networks':
      $content =  array(
        '#type' => 'markup',
        '#markup' => '
        <ul class="menu social">
          <li><a href="https://vimeo.com/elmcip"><i class="fa fa-vimeo-square"></i></a></li>
          <li><a href="https://twitter.com/elmcip"><i class="fa fa-twitter-square"></i></a></li>
          <li><a href="https://www.facebook.com/groups/480202502024095"><i class="fa fa-facebook-square"></i></a></li>
        </ul>',
      );
      $block = array(
        'content' => render($content),
      );
      return $block;

    default:
      break;
  }

  return $block;
}

/**
 * Implements hook_node_presave().
 */
function elmcip_setup_node_presave($node) {
  if ($node->type == 'person') {
    $entity_updated = entity_metadata_wrapper('node', $node);
    $nodeTitle = FALSE;
    $firstName = trim($entity_updated->field_first_name->value());
    $middleName = trim($entity_updated->field_middle_name->value());
    $lastName = trim($entity_updated->field_last_name->value());

    if ($firstName) {
      $nodeTitle = $firstName;
      $entity_updated->field_first_name->set($firstName);
    }
    else {
      $entity_updated->field_first_name->set(NULL);
    }

    if ($middleName) {
      if ($firstName) {
        $nodeTitle .= ' ' . $middleName;
      }
      else {
        $nodeTitle = $middleName;
      }
      $entity_updated->field_middle_name->set($middleName);
    }
    else {
      $entity_updated->field_middle_name->set(NULL);
    }

    if ($lastName) {
      if ($firstName || $middleName) {
        $nodeTitle .= ' ' . $lastName;
      }
      else {
        $nodeTitle = $lastName;
      }
      $entity_updated->field_last_name->set($lastName);
    }
    else {
      $entity_updated->field_last_name->set(NULL);
    }

    if ($nodeTitle) {
      $entity_updated->title->set($nodeTitle);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function elmcip_setup_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'person_node_form':
      $form['title']['#type'] = 'hidden';
      $form['title']['#default_value'] = 'ELMCIP auto generated - dummy';
      break;
    case 'taxonomy_form_term':
      $form['description']['#format'] = 4;
      $form['#after_build'][] = 'configure_term_form';
      break;
  }
}

/**
 * Remove input format selector and markup guidelines.
 *
 * @param $form
 * @return mixed
 */
function configure_term_form($form) {
  $form['description']['format']['format']['#access'] = FALSE;
  $form['description']['format']['help']['#access'] = FALSE;
  $form['description']['format']['guidelines']['#access'] = FALSE;

  return $form;
}

/**
 * Implements hook_field_formatter_info().
 */
function elmcip_setup_field_formatter_info() {
  return array(
    'elmcip_setup_term_name_with_tid' => array(
      'label' => t('Term tid'),
      'field types' => array('taxonomy_term_reference'),
    ),
  );
}

function elmcip_setup_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'elmcip_setup_term_name_with_tid':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => $item['tid'],
        );
      }
      break;
  }

  return $element;
}

/**
 * hook_field_attach_presave(),
 */
function elmcip_setup_field_attach_presave($entity_type, $entity) {
  if ($entity->vocabulary_machine_name == 'vocabulary_1') {
    if (!$entity->tid) {
      drupal_goto('taxonomy/vocabulary/term', array('query'=>drupal_get_destination()));
      $entity->description = 'Machine populate description.';
    }
  }
}

/**
 * Implements hook_menu().
 */
function elmcip_setup_menu() {
  $items = array();

  $items['taxonomy/vocabulary/term'] = array(
    'page callback' => 'elmcip_setup_description',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function elmcip_setup_description() {
 return drupal_get_form('mymodule_form');
}

/**
 * Drupal form.
 */
function mymodule_form($form, $form_state) {
  $form = array();

  $form['new_link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Taxonomy term description'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Implements form_submit().
 *
 * Validate the form.
 */
function mymodule_form_validate($form, &$form_state) {
  if ($form_state['values']['new_link_text'] == '') {
    form_set_error('new_link_text', t('Please fill out the description.'));
  }
}

/**
 * Handle post-validation form submission.
 */
function mymodule_form_submit($form, &$form_state) {
  $description = $form_state['values']['new_link_text'];
  drupal_set_message(t('Term description: %description', array('%description' => $description)));
}

<?php
/**
 * @file
 * Code for the ELMCIP data export feature.
 */

include_once 'elmcip_data_export.features.inc';

function elmcip_data_export_views_pre_render(&$view) {
  if ($view->name == 'Event_organizer') {

    $nids = array();
    foreach ($view->result as $key => $row) {
      if (!array_key_exists($row->nid, $nids)) {
        $nids[$row->nid] = $row;
      }
      else {
        if ($nids[$row->nid]->location_city != $row->location_city) {
          $nids[$row->nid]->location_city = $nids[$row->nid]->location_city . ', ' . $row->location_city;
        }
      }
    }
    $view->result = $nids;
  }
}

/**
 * Implements hook_menu().
 */
function elmcip_data_export_menu() {
  $items['data'] = array(
    'title' => 'Views containing landing pages and exports',
    'page callback' => 'elmcip_get_view_pages',
    'access arguments' => array('administer users'),
  );

  return $items;
}

/**
 * Build unordered lists of views having a path.
 *
 * @return array $content.
 */
function elmcip_get_view_pages() {
  $args = func_get_args();

  if (count($args) > 1) {
    drupal_not_found();
  }

  $views = views_get_enabled_views();
  $view_pages = '<h2>Views data exports</h2>';
  $view_pages .= _elmcip_get_views($views, 'views_data_export');

  $view_pages .= '<h2>Views pages</h2>';
  $view_pages .= _elmcip_get_views($views, 'page');


  $content['raw_markup'] = array(
    '#type' => 'markup',
    '#markup' => $view_pages,
  );

  return $content;
}

/**
 * @param $views object
 * @param $type string of view display to search for.
 *
 * @return string $view_page a unordered list.
 */
function _elmcip_get_views($views, $type) {
  $view_pages = '';
  $view_pages .= '<ul>';
  foreach($views as $view) {
    foreach($view->display as $display) {
      if ($display->display_plugin == $type) {

        global $base_url;
        global $base_path;
        $name = $display->display_title . '. ';
        if (isset($view->human_name)) {
          $name .= $view->human_name;
        }
        if ($view->description) {
          $name .= '. <br>' .$view->description . ': ';
        }
        else {
          $name .= ': ';
        }

        $view_pages .= '<li>' . $name;
        $view_pages .= '<a href="' . $base_url . $base_path . $display->display_options['path'] . '">' . $display->display_title . '</a>';
        $view_pages .=  '</li>';
      }
    }

  };
  $view_pages .= '</ul>';

  return $view_pages;
}

/**
 * Implements hook_views_pre_view().
 *
 * @param $view
 * @param $display_id
 * @param $args
 */
function elmcip_data_export_views_pre_view($view, &$display_id, &$args) {
  if ($view->name == 'elmcip_taxonomy_term' || $view->name ==  'all_tags_by_frequency') {
    if ($display_id == 'page' || $display_id == 'page_1') {
      $content = '';

      $tid = arg(2);
      if (!$tid) {
        return;
      }

      $terms = entity_load('taxonomy_term', array(arg(2)));
      $term = $terms[$tid];
      if ($term->description) {
        $class = 'term_present';
      }
      else {
        $class = 'term_missing';
      }

      // Section that run if user can add or edit existing term.
      if (taxonomy_term_edit_access($term)) {
        $edit_link = url('taxonomy/term/' . $term->tid . '/edit', array('query' => array('destination' => current_path())));
        if ($term->description) {
          $content = t('@description <a href="@url">Edit term</a>', array(
            '@description' => $term->description,
            '@url' => $edit_link
          ));
        }
        else {
          $content = t('Taxonomy term description is missing. <a href="@url">Please add one</a>', array('@url' => $edit_link));
        }
      }
      else {
        if ($term->description) {
          $content = t('@description', array('@description' => $term->description));
        }
      }

      // Add description and reorder description if more then one element.
      if ($content) {
        $header_options = [
          'label' => t('Taxonomy term description'),
          'content' => '<span class="' . $class . '">' . $content . '</span>',
          'format' => '2',
          'empty' => TRUE,
        ];
        $view->add_item($view->current_display, 'header', 'views', 'area', $header_options);

        $header = $view->display_handler->get_option('header');
        if (count($header) > 1) {
          $taxonomy = array_slice($header, -1, 1);
          $header = array_merge($taxonomy, $header);
          $view->display_handler->set_option('header', $header);
        }
      }
    }
  }
}
